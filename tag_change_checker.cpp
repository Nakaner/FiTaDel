/*

This file is part of check_tag_changes.

Copyright 2018 Michael Reichert <sourcecode@michreichert.de> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <getopt.h>

#include <osmium/io/reader.hpp>
#include <osmium/io/pbf_input.hpp>
#include <osmium/io/writer.hpp>
#include <osmium/io/xml_output.hpp>
#include <osmium/handler.hpp>

#include <osmium/osm/relation.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/node.hpp>

#include <osmium/util/progress_bar.hpp>

#include <iostream>

#include <osmium/visitor.hpp>

void print_help() {
    std::cerr << "Usage: prepdelrels OPTIONS BAD_UID INPUT_FILE\n" \
         "-h, --help              Print this help.\n" \
         "-o, --output=FILE       File to write XML change to\n" \
         "-v, --verbose           Output way IDs and versions, no progress bar.\n";
}

class CheckHandler : public osmium::handler::Handler {
    osmium::object_id_type last_obj_id = 0;
    unsigned int bad_nodes = 0;
    unsigned int bad_ways = 0;
    unsigned int bad_rels = 0;
    osmium::user_id_type bad_uid = 0;
    bool m_verbose;
    osmium::io::Writer writer;
    bool last_building_ne_yes = false;

public:
    CheckHandler() = delete;

    CheckHandler(osmium::user_id_type user, bool verbose, osmium::io::File& output_file) :
        bad_uid(user),
        m_verbose(verbose),
        writer(output_file) {}

    ~CheckHandler() {
        writer.close();
    }

    void osm_object(const osmium::OSMObject& obj) {
        if (obj.id() == last_obj_id && bad_uid == obj.uid() && last_building_ne_yes && obj.tags().has_tag("building", "yes")) {
            switch (obj.type()) {
            case osmium::item_type::node: 
                ++bad_nodes;
                break;
            case osmium::item_type::way:
                ++bad_ways;
                break;
            case osmium::item_type::relation:
                ++bad_rels;
                break;
            default:
                break;
            }
            if (m_verbose) {
                std::cout << obj.type() << ' ' << obj.id() << " v " << obj.version() << '\n';
            }
            last_building_ne_yes = false;
            last_obj_id = 0;
            // write to output file
            writer(obj);
        } else {
            last_obj_id = obj.id();
            const char* building = obj.get_value_by_key("building");
            last_building_ne_yes = building && strcmp(building, "yes");
        }
    }

    void output() {
        std::cout << "bad node changes: " << bad_nodes << '\n';
        std::cout << "bad way changes: " << bad_ways << '\n';
        std::cout << "bad relation changes: " << bad_rels << '\n';
    }
};

int main(int argc, char* argv[]) {
    bool verbose = false;
    std::string output_location = "";
    static struct option long_options[] = {
            {"help",   no_argument, 0, 'h'},
            {"output",   required_argument, 0, 'o'},
            {"verbose",   no_argument, 0, 'v'},
            {0, 0, 0, 0}
        };
    while (true) {
        int c = getopt_long(argc, argv, "ho:v", long_options, 0);
        if (c == -1) {
            break;
        }
        switch (c) {
        case 'h':
            print_help();
            break;
        case 'o':
            output_location = optarg;
            break;
        case 'v':
            verbose = true;
            break;
        default:
            print_help();
            exit(0);
        }
    }
    int remaining_args = argc - optind;
    if (remaining_args != 2 || output_location == "") {
        print_help();
        exit(1);
    }
    osmium::io::File input_file{argv[optind + 1]};
    osmium::user_id_type bad_uid = std::atoi(argv[optind]);
    osmium::io::File output_file{output_location};

    CheckHandler check_handler{bad_uid, verbose, output_file};
    osmium::io::Reader reader{input_file};
    osmium::ProgressBar progress{reader.file_size(), osmium::util::isatty(2) & !verbose};
    while (osmium::memory::Buffer buffer = reader.read()) {
        progress.update(reader.offset());
        osmium::apply(buffer, check_handler);

    }
    progress.done();
    reader.close();

    // write output
    check_handler.output();
}
